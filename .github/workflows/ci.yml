name: Python CI for Taskgist

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*' # Trigger on version tags like v0.1.0, v1.2.3, etc.
  pull_request:
    branches: [ "main" ]

# Default permissions for GITHUB_TOKEN for all jobs.
# 'build_and_test' only needs to read contents.
# 'release' job will override this to get 'write' permissions for contents.
permissions:
  contents: read

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    # This project targets Python 3.12 as per pyproject.toml 'requires-python' and README.
    # If matrix testing across multiple Python versions or OS were desired, it would be defined here.


    # Define an environment variable at the job level to check for the secret's presence.
    # This expression evaluates to the string 'true' or 'false'.
    env:
      HAS_GEMINI_KEY: ${{ secrets.GEMINI_API_KEY != '' && secrets.GEMINI_API_KEY != null }}
    if: |
      github.event_name == 'pull_request' ||
      startsWith(github.ref, 'refs/tags/v') ||
      (
        github.event_name == 'push' &&
        github.ref == 'refs/heads/main' &&
        !startsWith(github.event.head_commit.message, 'Bump version to v')
      )
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install just
        uses: extractions/setup-just@v2
        # To pin a specific version of just:
        # with:
        #   just-version: '1.25.0' # Example version

      - name: Set up Python 3.12 and uv
        uses: astral-sh/setup-uv@v5
        with:
          # To pin a specific uv version (recommended for stability):
          # version: "0.2.7" # Check for the latest stable uv version
          python-version: "3.12" # Matches 'requires-python' in pyproject.toml and README
          enable-cache: true # Enable uv's built-in caching mechanism
          # Invalidate uv's cache if pyproject.toml changes, ensuring dependencies are re-evaluated.
          cache-dependency-glob: "pyproject.toml"

      # The project's justfile provides convenient targets.
      # The default 'just' task runs: sync, baml-generate, and lint.
      # - 'sync': Installs dependencies using 'uv sync'.
      # - 'baml-generate': Generates the BAML Python client.
      # - 'lint': Lints the Python code using Ruff.
      - name: Run sync, BAML generation, and lint
        run: just
        # This is equivalent to running:
        # $ just sync
        # $ just baml-generate
        # $ just lint

      # Run BAML tests defined in *.baml files (e.g., src/taskgist/baml_src/keywords.baml).
      # These tests might require an API key if they interact with a live LLM.
      # The 'baml-test' just target depends on 'baml-generate' (which was run in the previous step).
      - name: Run BAML tests
        # Use the job-level environment variable for the condition.
        # Compare against the string 'true'.
        if: env.HAS_GEMINI_KEY == 'true'
        env:
          # Pass the actual secret value to the step's environment if the condition is met.
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: just baml-test
      
      - name: Inform if BAML tests were skipped
        # Use the job-level environment variable for the condition.
        # Compare against the string 'false'.
        if: env.HAS_GEMINI_KEY == 'false'
        run: |
          echo "INFO: GEMINI_API_KEY secret not found or empty. Skipping BAML tests that may require it."

      - name: Build package
        run: just build # This creates .whl and .tar.gz in dist/

      - name: Verify build artifacts
        run: |
          echo "Contents of dist/ directory:"
          ls -lR dist/
          if [ -z "$(ls -A dist/*.whl)" ]; then 
            echo "Error: No wheel (.whl) file found in dist/ directory!"
            exit 1
          fi
          if [ -z "$(ls -A dist/*.tar.gz)" ]; then
            echo "Error: No sdist (.tar.gz) file found in dist/ directory!"
            exit 1
          fi
          echo "Build artifacts verified successfully."

      # Upload wheel and sdist as separate artifacts.
      # Each artifact will be a .zip file containing the respective package file.
      - name: Upload Wheel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel-${{ runner.os }}-py3.12
          path: dist/*.whl # Uploads the .whl file(s) found
          if-no-files-found: error

      - name: Upload Sdist Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-sdist-${{ runner.os }}-py3.12
          path: dist/*.tar.gz # Uploads the .tar.gz file(s) found
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    # Only run this job if a tag matching 'v*.*.*' was pushed
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build_and_test # Ensure build_and_test passes before releasing
    permissions:
      contents: write # Required to create a release and upload assets

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Useful for release notes generation or if release body refers to files like CHANGELOG.md

      - name: Create dist directory for downloaded artifacts
        run: mkdir -p dist # Ensure the target directory for downloads exists

      - name: Download Wheel Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-wheel-${{ runner.os }}-py3.12 # Must match the name used in upload-artifact
          path: dist/ # Download the .whl into the dist/ directory

      - name: Download Sdist Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-sdist-${{ runner.os }}-py3.12 # Must match the name used in upload-artifact
          path: dist/ # Download the .tar.gz into the dist/ directory

      - name: Display downloaded artifacts
        run: |
          echo "Contents of dist/ directory after download:"
          ls -lR dist

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # tag_name: ${{ github.ref_name }} # Action automatically uses the triggering tag
          # name: Release ${{ github.ref_name }} # Optional: customize release name (defaults to tag name)
          # body: | # Optional: customize release body, e.g., by reading from a CHANGELOG.md
          #   See [CHANGELOG.md](CHANGELOG.md) for details.
          # generate_release_notes: true # Uncomment to auto-generate release notes from commits
          files: |
            dist/*.whl
            dist/*.tar.gz
          # draft: false # Set to true to create a draft release
          # prerelease: false # Set to true if the tag represents a pre-release
        env:
          # GITHUB_TOKEN is automatically provided by GitHub Actions with the correct permissions (contents: write)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
