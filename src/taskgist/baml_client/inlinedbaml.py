###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "client<llm> FlashLite {\n  provider google-ai\n  options {\n    model \"gemini-2.0-flash-lite\"\n    api_key env.GEMINI_API_KEY\n    generationConfig {\n      temperature 0.0\n    }\n  }\n}\n",
    "generators.baml": "// To use this configuration, run `baml-cli generate`\n// For more information, see https://docs.boundaryml.com/v2/baml-overview/concepts/client-generators\n\ngenerator python_client {\n  output_type \"python/pydantic\"\n  // Where the generated code will be saved (relative to baml_src/)\n  output_dir \"../\"\n  version \"0.89.0\" // Should match the baml-py version in pyproject.toml\n  // default_client_mode \"async\" // You can specify sync or async default\n}\n",
    "keywords.baml": "class KeywordPhrase {\n  actionVerb string @description(\"The leading verb that describes the main action\")\n  phrase string[] @description(\"Rest of the keyword phrase with essential terms only\")\n}\n\nfunction ExtractKeywords(taskDescription: string) -> KeywordPhrase {\n  client FlashLite\n  prompt #\"\n    Extract a concise keyword phrase from the given software engineering task description.\n    Guidelines:\n    - Return at most 5 keywords.\n    - The first keyword must be a single-word action verb summarizing the task.\n    - Each keyword MUST be a single word with NO SPACES.\n    - Omit articles (the, a, an), common prepositions (in, on, to, for), and pronouns (it, this, that, etc.).\n    - Keep only essential terms representing the core task.\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} {{ taskDescription }}\n  \"#\n}\n\ntest BasicTaskTest {\n  functions [ExtractKeywords]\n  args {\n    taskDescription \"Create a new user authentication system with email verification and password reset capabilities\"\n  }\n}\n\ntest EmptyTaskTest {\n  functions [ExtractKeywords]\n  args {\n    taskDescription \"No task provided\"\n  }\n}\n",
}

def get_baml_files():
    return file_map